openapi: 3.0.0
info:
  title: SuperFrog API
  description: |-
    Super Frog API for the WebTech SuperFrog Scheduler project
  contact:
    name: SuperFrog Team
    url: https://github.com/jhmejia/webtech-superfrog
  version: 1.2.0
servers:
  # Update when it is deployed to Production
  - url: localhost:8080/api
    description: Development server
tags:
  - name: superfrogs
    description: What you can do as a spirit director relating to SuperFrogs management. 
  
  - name: requests-management
    description: Requests management from the perspective of a spirit director.

  - name: requests
    description: What you can do as a superfrog relating to requests management.
    
  - name: user
    description: Operations about user
paths:

# SuperFrog CRUD
  /superfrogs:
    get:
      tags:
        - superfrogs
      summary: Get all superfrogs
      description: Get all superfrogs and return them in an array. 
      operationId: getSuperfrogs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseFindAllSuperfrogs'
        '400':
          description: Invalid status value
        '404':
          description: SuperFrogs not found
    post:
      tags:
        - superfrogs
      summary: Add a new superfrog
      description: Add a new superfrog and return the new superfrog
      operationId: addSuperfrog
      requestBody:
        description: SuperFrog object that needs to be added
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SuperFrog'
              example:
                username: "SuperFrog1"
                firstName: "SuperFrog"
                lastName: "example"
                email: "aej@gmail.com"
                password: "password"
                active: true
      responses:
        200:
          description: SuperFrog created 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseAddSuperfrog'
        400:
          description: Bad request
          content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/ApiResponseSuperfrogBadRequest'

          
  /superfrogs/active:  
    get:
      tags:
        - superfrogs
      summary: Get all actives
      description: get all active superfrogs
      operationId: getActiveSuperfrogs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuperFrog'
        '400':
          description: Invalid status value
        '404':
          description: SuperFrogs not found
          
  /superfrogs/{superfrogId}:
    get:
      tags:
        - superfrogs
      summary: Find superfrog by ID
      description: Returns a single superfrog
      operationId: getSuperfrogById
      parameters:
        - name: superfrogId
          in: path
          description: ID of superfrog to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuperFrog'
        '400':
          description: Invalid ID supplied
        '404':
          description: SuperFrog not found
          
          
    put:
      tags:
        - superfrogs
      summary: Update an existing superfrog
      description: Update an existing superfrog
      operationId: updateSuperfrog
      parameters:
        - name: superfrogId
          in: path
          description: ID of superfrog to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: SuperFrog object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuperFrog'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: SuperFrog not found
        '405':
          description: Validation exception
    # delete:
    #   tags:
    #     - superfrogs
    #   summary: Deletes a superfrog
    #   description: Deletes a superfrog
    #   operationId: deleteSuperfrog
    #   parameters:
    #     - name: superfrogId
    #       in: path
    #       description: SuperFrog id to delete
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #   responses:
    #     '400':
    #       description: Invalid ID supplied
    #     '404':
    #       description: SuperFrog not found
          
  # Requests CRUD
  /requests:
    get:
      tags:
        - requests-management
      summary: Get all requests, as a spirit director. 
      description: Get all requests
      operationId: getRequests
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
        '400':
          description: Invalid status value
        '404':
          description: Requests not found
    post:
      tags:
        - requests-management
      summary: Add a new request
      description: Add a new request
      operationId: addRequest
      requestBody:
        description: Request object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '405':
          description: Invalid input
  /requests/{requestId}:
    get:
      tags:
        - requests-management
      summary: Find request by ID
      description: Returns a single request
      operationId: getRequestById
      parameters:
        - name: requestId
          in: path
          description: ID of request to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
    put:
      tags:
        - requests-management
      summary: Update an existing request
      description: Update an existing request
      operationId: updateRequest
      parameters:
        - name: requestId
          in: path
          description: ID of request to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Request object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
        '405':
          description: Validation exception
    delete:
      tags:
        - requests
      summary: Deletes a request
      description: Deletes a request
      operationId: deleteRequest
      parameters:
        - name: requestId
          in: path
          description: Request id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
  /requests/{requestId}/assign/{superfrogId}:
    put:
      tags:
        - requests-management
      summary: Assign a superfrog to a request
      description: Assign a superfrog to a request
      operationId: assignSuperfrog
      parameters:
        - name: requestId
          in: path
          description: ID of request to return
          required: true
          schema:
            type: integer
            format: int64
        - name: superfrogId
          in: path
          description: ID of superfrog to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
        '405':
          description: Validation exception
  /requests/{requestId}/unassign:
    put:
      tags:
        - requests-management
      summary: Unassign a superfrog from a request
      description: Unassign a superfrog from a request
      operationId: unassignSuperfrog
      parameters:
        - name: requestId
          in: path
          description: ID of request to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
        '405':
          description: Validation exception
  /requests/{superfrogID}:
    get:
      tags:
        - requests
      summary: Get all requests for a superfrog student
      description: Get all requests for a superfrog student
      operationId: getRequestsBySuperfrogID
      parameters:
        - name: superfrogID
          in: path
          description: ID of frog to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
  /requests/{superfrogID}/status/{status}:
    get:
      tags:
        - requests
      summary: Get all requests for a superfrog student with a specific status
      description: Get all requests for a superfrog student with a specific status
      operationId: getRequestsBySuperfrogIDAndStatus
      parameters:
        - name: superfrogID
          in: path
          description: ID of frog to return
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: path
          description: Status of request to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
  /requests/{requestId}/status/{status}:
    put:
      tags:
        - requests-management
      summary: Update the status of a request
      description: Update the status of a request. 
      operationId: updateRequestStatus
      parameters:
        - name: requestId
          in: path
          description: ID of request to return
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: path
          description: Status of request to return
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Request not found
        '405':
          description: Validation exception


# User CRUD
  /user/create:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
components:
  schemas:
    SuperFrog:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: "superfrog1"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Mejyen"
        email:
          type: string
          format: email
          example: "example@gmail.com"
        password:
          type: string
          format: password
          example: "password"
        active:
          type: boolean
          example: true
      required:
        - username
        - firstName
        - lastName
        - email
        - password

    Request:
      type: object
      properties:
        id:
          type: integer
          format: int64
        superfrogID:
          type: integer
          format: int64
        status:
          type: string
        eventDescription:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        contactFirstName:
          type: string
        contactLastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        eventTitle: 
          type: string
        nameOfOrganization:
          type: string
        addressOfAppearance:
          type: string
        specialInstructions:
          type: string
        outsideOrganizations:
          type: string
        expensesBenefits:
          type: string
        scheduleDate:
          type: string
        startTime:
          type: string
        endTime: 
          type: string
        eventType:
          type: string
        totalCost:
          type: number
          format: double   
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      required:
        - username
        - firstName
        - lastName
        - email
        - password
        - phone
        - userStatus
    SuperFrogList:
      type: array
      items:
        $ref: '#/components/schemas/SuperFrog'
      example:
        - id: 1
          username: "superfrog1"
          firstName: "John"
          lastName: "Mejyen"
          email: "example@gmail.com"
          password: "password"
          active: true
        - id: 2
          username: "superfrog2"
          firstName: "Joey"
          lastName: "Quinn"
          email: "iamacat@gmail.com"
          password: "password2"
          active: true
        - id: 3
          username: "superfrog3"
          firstName: "Ethan"
          lastName: "Edinboro"
          email: "jo@gmail.com"
          password: "password3"
          active: false
    ApiResponseFindAllSuperfrogs:
      title: API response for findAllSuperfrogs
      type: object
      properties:
        flag:
          type: boolean
          description: Flag to indicate if the request was successful
        code: 
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Message to indicate if the request was successful
          example: "Find All Success"
        data:
          $ref: '#/components/schemas/SuperFrogList'
    ApiResponseAddSuperfrog:
      title: API response for addSuperFrog
      type: object
      properties:
        flag:
          type: boolean
          description: Flag to indicate if the request was successful
        code: 
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Message to indicate if the request was successful
          example: "Add Success"
        data:
          allOf:
            - $ref: '#/components/schemas/SuperFrog'
          example:
            id: 1
            username: "superfrog1"
            firstName: "John"
            lastName: "Mejyen"
            email: "asaifd@gmail.com"
            password: "password"
            active: true
    ApiResponseFindSuperfrogById: 
      title: API response for findSuperFrogById
      type: object
      properties:
        flag:
          type: boolean
          description: Flag to indicate if the request was successful
        code: 
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Message to indicate if the request was successful
          example: "Find By Id Success"
        data:
          allOf:
            - $ref: '#/components/schemas/SuperFrog'
          example:
            id: 1
            username: "superfrog1"
            firstName: "John"
            lastName: "Mejyen"
            email: "meow@gmail.com"
            password: "password"
            active: true
    ApiResponseUpdateSuperfrog:
      title: API response for updateSuperfrog
      type: object
      properties:
        flag:
          type: boolean
          description: Flag to indicate if the request was successful
        code: 
          type: integer
          description: HTTP status code
          example: 200
        message:
          type: string
          description: Message to indicate if the request was successful
          example: "Update Success"
        data:
          allOf:
            - $ref: '#/components/schemas/SuperFrog'
          example:
            id: 1
            username: "superfrog1"
            firstName: "John"
            lastName: "Mejyen"
            email: "misty@gmail.com"
            password: "password"
            active: true
    ApiResponseSuperfrogBadRequest:
      title: API response for bad request error
      description: The schema for bad request error
      type: object
      properties:
        flag:
          title: flag
          description: Success or not
          type: boolean
          example: false
          readOnly: true
        code:
          title: Http status code
          description: Http status code
          type: integer
          example: 400
          readOnly: true
        message:
          title: Message
          description: The long error message
          type: string
          example: Provided arguments are invalid, see data for details.
          readOnly: true
        data:
          $ref: '#/components/schemas/SuperfrogBadRequest'
    SuperfrogBadRequest:
      title: Superfrog bad request
      description: Messages describing a bad request error
      type: object
      properties:
        username:
          title: Username
          description: Username error message
          type: string
          example: Username must be between 3 and 20 characters long
        firstName:
          title: First name
          description: First name error message
          type: string
          example: first name is required
        lastName:
          title: Last name
          description: Last name error message
          type: string
          example: last name is required
        email:
          title: Email
          description: Email error message
          type: string
          example: email is required
        password:
          title: Password
          description: Password error message
          type: string
          example: password is required
      
    
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    api_key_query:
      type: apiKey
      name: api_key
      in: query
      